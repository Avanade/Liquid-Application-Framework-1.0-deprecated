using Newtonsoft.Json.Linq;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Text.RegularExpressions;
using System.Xml;

namespace Liquid.Activation
{
	public static class ModelSpecificationEngine
	{
		public const string REQUIRED = "[Required]";
		public readonly static string PATTERN = @"(\.*{""attribute.*)";

		public static ProjectMeta projectMeta;
		private static List<SwaggerMetaData> _swaggerMetaDatas;
		public static List<SwaggerMetaData> swaggerMetaDatas
		{
			get
			{
				if (_swaggerMetaDatas == null)
				{
					_swaggerMetaDatas = Initalize();
				}

				return _swaggerMetaDatas;
			}
		}

		public static List<SwaggerMetaData> Initalize()
		{
			if(projectMeta == null)
			{
				projectMeta = new ProjectMeta();
			}

			//Object that will be returned for the ModelSpecification
			List<SwaggerMetaData> swaggerMetaDatas = new List<SwaggerMetaData>();

			XmlDocument doc = new XmlDocument();

			//Load xml generated by swagger.
			doc.Load(ModelSpecificationExtension.PathSwagger);

			//Version of meta
			projectMeta.version = doc.FirstChild.InnerText.Split("=").LastOrDefault().Replace(@"""", "");

			//Get all tags members ad then check all childs
			var getTagsMembers = doc.GetElementsByTagName("member");

			XmlNode nodeRoot;
			XmlNode nodeAttribute;		

			//This for is responsible for get all classes generated by swagger.
			for (int i = 0; i < getTagsMembers.Count; i++)
			{
				//Initialize object.
				SwaggerMetaData swaggerMeta = new SwaggerMetaData() { PropertyRutime = new Dictionary<string, Tuple<string, bool>>() };				

				//Get the parent root to be possible iterate for childs
				nodeRoot = getTagsMembers.Item(i);

				//Capturando a tag Member e lendo seus atributos para saber se é Classe ou propriedade.
				nodeAttribute = getTagsMembers.Item(i).Attributes.Item(0);

				//Get all classe using the contains T:. 
				if (nodeAttribute != null && nodeAttribute.InnerText.Contains("T:"))
				{
					//Get the comment for the classes
					var summary = nodeRoot.FirstChild.InnerText.Replace("\n", string.Empty).Replace("\r", string.Empty).Trim();

					//Check if this class already exist in our dictionary
					if (!swaggerMetaDatas.Where(x => x.Equals(nodeAttribute.InnerText.Split('.').LastOrDefault())).Any())
					{
						//Get the classes name
						swaggerMeta.Name = nodeAttribute.InnerText.Split('.').LastOrDefault();

						//Get the description for this classes
						if (!string.IsNullOrEmpty(summary))
						{
							swaggerMeta.Description = summary;						
						}
						//Insert the object metada on our list
						swaggerMetaDatas.Add(swaggerMeta);

						swaggerMeta = null;					
					}
				}

			}

			// For responsible for get all properties for the classes generated by Swagger.
			for (int i = 0; i < getTagsMembers.Count; i++)
			{
				//Get the root for search all tags
				nodeRoot = getTagsMembers.Item(i);

				//Get attributes for this case get the description of the properties
				nodeAttribute = getTagsMembers.Item(i).Attributes.Item(0);

				//Check if this attribute is a property of our xml
				if (nodeAttribute != null && nodeAttribute.InnerText.Contains("P:"))
				{
					//Get the fullnamespace including the name of the class 
					string[] fullNameSpace = nodeAttribute.InnerText.Split('.');
					//Recovery the penultimate value in this case the class name
					string classNameByNameSpace = fullNameSpace[(fullNameSpace.Length - 2)];
					//Get the description of the property
					var summary = nodeRoot.FirstChild.InnerText.Replace("\n", "").Replace("\r", string.Empty).Trim();

					if (swaggerMetaDatas.Where(x => x.Name == classNameByNameSpace).Any())
					{
						SwaggerMetaData swaggerMetaData = swaggerMetaDatas.Where(x => x.Name == classNameByNameSpace).FirstOrDefault();
						// Add the property with description in final list
						swaggerMetaData.PropertyRutime.TryAdd(fullNameSpace[(fullNameSpace.Length - 1)], new Tuple<string, bool>(summary, summary.Contains(REQUIRED)));					
					}
				}
			}

			return swaggerMetaDatas;
		}

	}
	/// <summary>
	/// Class for generate the metadata of the swagger that been said, will for check
	/// </summary>
	public class SwaggerMetaData
	{
		public string Name { get; set; }
		public string Description { get; set; }
		public JObject Format { get; set; }
		public Dictionary<string, Tuple<string, bool>> PropertyRutime { get; set; }
	}

	/// <summary>
	/// 
	/// </summary>
	public class ProjectMeta
	{
		public string version { get; set; }
		public string project { get; set; }
		public string hub { get; set; }
	}
}
